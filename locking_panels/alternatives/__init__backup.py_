# -*- coding: UTF-8 -*-

# COPYRIGHT (c) 2016 Crist√≥bal Ganter
#
# GNU AFFERO GENERAL PUBLIC LICENSE
#    Version 3, 19 November 2007
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import json
from .control import AlterControlLockingPanel   # noqa
from .control import AlterControlWSC            # noqa
from .question import AlterQuestionLockingPanel  # noqa
from .question import AlterQuestionWSC           # noqa
import src
from src.db import DBObject, db, NoObjectReturnedFromDB
from src.exceptions import NotDictError, NotStringError, \
    MissingFieldError
from src.utils import standard_name
from src.wsclass import subscribe
from tornado.gen import coroutine

class Respuestas(DBObject):
    coll = db.respuestas

    @property
    def answer(self):
        return self._data['answer']


class alternativesWSC(src.wsclass.WSClass):
    @subscribe('alternatives.launch', 'w')
    def launch_alternatives(self, message=None):
        try:
            resp = Respuestas.create()
            self.pub_subs['d'].send_message(
                    {
                        'type': 'courseMessage({})'.format(self.handler.course.id),
                        'content': {
                            'type': 'alternatives.spread',
                            'content': message
                        }
                    }
                )
        except:
            raise

    @subscribe('alternatives.spread', 'l')
    def spread_alternatives(self, message=None):
        try:
            self.pub_subs['w'].send_message(
                    {
                        'type': 'alternatives.show',
                        'wording': message['content']['question_data']['wording'],
                        'answers': message['content']['question_data']['answers']
                    }
                )
        except:
            raise

    @subscribe('alternatives.close.teacher', 'w')
    def close_alternatives(self, message=None):
        try:
            self.pub_subs['d'].send_message(
                    {
                        'type': 'courseMessage({})'.format(self.handler.course.id),
                        'content': {
                            'type': 'alternatives.close.students',
                            'content': message
                        }
                    }
                )
        except:
            raise

    @subscribe('alternatives.close.students', 'l')
    def close_students_alternatives(self, message=None):
        try:
            self.pub_subs['w'].send_message(
                    {
                            'type': 'alternatives.close.clients',
                    }
                )
        except:
            raise

    @subscribe('alternatives.results.show', 'w')
    def show_alternatives(self, message=None):
        try:
            self.pub_subs['l'].send_message(
                    {
                        'type': 'user.message.frontend.send',
                        'content': {
                            'type': 'alternatives.results.show',
                            'content': message
                        }
                    }
                )
        except:
            raise

    @subscribe('alternatives.results.hide', 'w')
    def hide_alternatives(self, message=None):
        try:
            self.pub_subs['l'].send_message(
                    {
                        'type': 'user.message.frontend.send',
                        'content': {
                            'type': 'alternatives.results.hide',
                            'content': message
                        }
                    }
                )
        except:
            raise

    @subscribe('alternatives.answer', 'w')
    def answer_alternatives(self, message=None):
        try:

            #crear el DBObject si no existe y agregar las respuestas
            #calcular los porcenajes
            self.pub_subs['d'].send_message(
                    {
                        'type': self.handler.course_msg_type,
                        'content': {
                            'type': 'teacherMessage',
                            'content': {
                                'type': 'alternatives.update',
                                'content': message #aqui van los porcentajes
                            }
                        }
                    }
                )
        except:
            raise

    @subscribe('alternatives.update', 'l')
    def update_alternatives(self, message=None):
        try:
            self.pub_subs['w'].send_message(
                    {
                            'type': 'alternatives.results',
                            'percentages': [10,20,30,40]
                    }
                )
        except:
            raise
